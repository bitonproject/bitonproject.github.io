(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{359:function(t,e,a){"use strict";a.r(e);var r=a(43),o=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"protocol-specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-specification"}},[t._v("#")]),t._v(" Protocol specification "),a("Badge",{attrs:{text:"alpha",type:"warning"}})],1),t._v(" "),a("h2",{attrs:{id:"versioning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#versioning"}},[t._v("#")]),t._v(" Versioning")]),t._v(" "),a("p",[a("code",[t._v('biton.VERSION = "biton" || bitonCrypto.VERSION || "_" || biton.TRANSPORT')])]),t._v(" "),a("p",[t._v("This document outlines the specification for "),a("code",[t._v("biton0_BitTorrent")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"notation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notation"}},[t._v("#")]),t._v(" Notation")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("x || y")]),t._v(" is the concatenation of x and y without a separator.")]),t._v(" "),a("li",[a("code",[t._v("x |& y")]),t._v(" concatenates x and y with an ampersand character ('&') as separator. You must use this concatenation when a field is optional. In that case, we write no bytes for the empty fields, but still add the separators.")]),t._v(" "),a("li",[a("code",[t._v("[ ]")]),t._v(" denotes byte (uint8_t) arrays.")]),t._v(" "),a("li",[a("code",[t._v("s[:n]")]),t._v(" is the first n bytes of s.")]),t._v(" "),a("li",[t._v("All numeric fields in the wire protocol are transmitted as Big Endian (Network byte order) values.")]),t._v(" "),a("li",[t._v("For fields of variable length, we write the field length followed by the field value.")])]),t._v(" "),a("h2",{attrs:{id:"bitoncrypto-version-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitoncrypto-version-0"}},[t._v("#")]),t._v(" bitonCrypto.VERSION = 0")]),t._v(" "),a("ul",[a("li",[t._v("Proxying based on NoiseSocket and the noise-c library\n"),a("ul",[a("li",[a("code",[t._v("bitonCrypto.NOISE_PROTOCOL = NOISE_*_25519_ChaChaPoly_Blake2b")])])])]),t._v(" "),a("li",[t._v("Chunks encrypted with libsodium crypto_secretstream\n"),a("ul",[a("li",[a("code",[t._v("bitonCrypto.secretstream = secretstream_xchacha20poly1305")])])])]),t._v(" "),a("li",[t._v("Generic hash algorithm\n"),a("ul",[a("li",[a("code",[t._v("bitonCrypto.hash = Blake2b_256")])])])])]),t._v(" "),a("h2",{attrs:{id:"biton-node-address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biton-node-address"}},[t._v("#")]),t._v(" biton node address")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("keypair = bitonCrypto.generateKeyPair().x25519\nidentity = bitonCrypto.base58.encode(keypair.public)\npeerId = WebTorrent.VERSION_PREFIX[:8] || identity[:12]\n")])])]),a("blockquote",[a("p",[t._v("Example: for"),a("code",[t._v("identity = BkZgDsGD94DtZ83BwsHgce4Q4j2qr5PQGpjPQnPj8BGs")]),t._v(", "),a("code",[t._v("peerId = -WW0008-BkZgDsGD94Dt")]),t._v(" in utf8, or "),a("code",[t._v("peerId = 2d5757303030382d426b5a674473474439344474")]),t._v(" in hex.")])]),t._v(" "),a("h2",{attrs:{id:"biton-swarm-address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biton-swarm-address"}},[t._v("#")]),t._v(" biton swarm address")]),t._v(" "),a("p",[a("code",[t._v("swarmId = bitonCrypto.hash( biton.VERSION |& networkMagic |& swarmSecret |& swarmPath )[:20]")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("bitonVersion = “biton” || bitonCrypto.VERSION")]),t._v(" (e.g. "),a("code",[t._v('"biton0"')]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("networkMagic")]),t._v(": 4 “magic” bytes for specifying a network (e.g. "),a("code",[t._v("[0, 0, 0, 0]")]),t._v(" for the main network, and "),a("code",[t._v("[0x74, 0x65, 0x73, 0x74]")]),t._v(" for the test network)")]),t._v(" "),a("li",[a("code",[t._v("swarmSeed")]),t._v(": the secret seed for connecting to a private swarm (e.g. "),a("code",[t._v('"orbit#biton"')]),t._v(", or null for global swarms)")]),t._v(" "),a("li",[a("code",[t._v("swarmPath")]),t._v(": the path from root to the corresponding node in the CAN partition tree,  or null for the root swarm")])]),t._v(" "),a("blockquote",[a("p",[t._v("Example: "),a("code",[t._v('swarmId = bitonCrypto.hash ( "biton0" |& [0, 0, 0, 0] |& null |& 0x5 )[:20]')])])]),t._v(" "),a("h2",{attrs:{id:"biton-data-chunk-address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biton-data-chunk-address"}},[t._v("#")]),t._v(" biton data chunk address")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("chunkHash = bitonCrypto.hash(chunk)")])]),t._v(" "),a("li",[a("code",[t._v("chunkId = bitonCrypto.hash(biton.VERSION |& networkMagic |& swarmSecret |& chunkHash)")])]),t._v(" "),a("li",[t._v("Mesospore wire header: "),a("code",[t._v("sporeId = spore.VERSION || networkMagic || chunkId || capabilities || chunk")])])]),t._v(" "),a("p",[t._v("Chunks are 1KiB, 32KiB, or 256KiB parts of "),a("code",[t._v("bitonCrypto.secretstream")])]),t._v(" "),a("blockquote",[a("p",[t._v("Example: "),a("code",[t._v('sporeId = "spore0" || [0, 0, 0, 0] || chunkId || capabilities || chunk')])])]),t._v(" "),a("h2",{attrs:{id:"wire-message-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wire-message-format"}},[t._v("#")]),t._v(" Wire message format")]),t._v(" "),a("p",[a("code",[t._v('"5biton" || version || networkMagic || command || command headers || payload')])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Field size (bytes)")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Description")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Data type")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Comments")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Protocol")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("char[6]")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("protocol name length, followed by protocol name in ASCII ("),a("code",[t._v("5biton")]),t._v(")")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Crypto version")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("uint8_t")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1 byte of zero ([0]) for bitonCrypto.VERSION = 0")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Destination network magic bytes")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("uint32_t")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Magic bytes for specifying biton network. Main net is 4 bytes of 0 "),a("code",[t._v("[0, 0, 0, 0]")]),t._v(". Test net is "),a("code",[t._v("[0x74, 0x65, 0x73, 0x74]")])])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("biton command")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("uint8_t")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",[t._v("variable")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Command headers")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("[ ]")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",[t._v("variable")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Payload")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("[ ]")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Must be padded to one of the supported payload lengths (1KB or 32KB)")])])])]),t._v(" "),a("h2",{attrs:{id:"bittorrent-transport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bittorrent-transport"}},[t._v("#")]),t._v(" BitTorrent transport")]),t._v(" "),a("ul",[a("li",[t._v("Referred to as "),a("code",[t._v("biton*_BitTorrent")])]),t._v(" "),a("li",[t._v("WebTorrent extension implementing "),a("a",{attrs:{href:"http://www.bittorrent.org/beps/bep_0010.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("BEP 10")]),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Extended message ID is "),a("code",[t._v("biton")])]),t._v(" "),a("li",[t._v("Serialization using "),a("a",{attrs:{href:"https://www.bittorrent.org/beps/bep_0003.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("bencode")]),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Only load extension on wires of peers in biton swarms")])])])}),[],!1,null,null,null);e.default=o.exports}}]);